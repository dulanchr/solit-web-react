import React__default, { Children, useState, useRef, useEffect, createElement } from 'react';

var styles = {"carousel3d":"_3S5hN","slider":"_1M2Y0","cSlide":"_3Kd29","cSlideActive":"_3iE0F","cSlideNext":"_p4xY4","cSlideNext2":"_22ilR","cSlidePrev":"_1urm5","cSlidePrev2":"_hmRlI","right":"_2ehri","left":"_2lGdA"};

var Carousel = function Carousel(_ref) {
  var children = _ref.children,
      _ref$direction = _ref.direction,
      direction = _ref$direction === void 0 ? 'ltr' : _ref$direction;
  var arrayChildren = Children.toArray(children);

  var _useState = useState(1),
      labelIndex = _useState[0],
      setLabelIndex = _useState[1];

  var savedCallback = useRef();

  function callback() {
    if (labelIndex === (arrayChildren === null || arrayChildren === void 0 ? void 0 : arrayChildren.length)) {
      setLabelIndex(1);
    } else {
      setLabelIndex(labelIndex + 1);
    }
  }

  useEffect(function () {
    savedCallback.current = callback;
  });
  useEffect(function () {
    function tick() {
      savedCallback.current();
    }

    var id = setInterval(tick, 2000);
    return function () {
      return clearInterval(id);
    };
  }, []);
  return React__default.createElement("div", {
    className: styles.carousel3d
  }, React__default.createElement("section", {
    className: styles.slider + " " + styles["" + direction]
  }, React__default.Children.map(arrayChildren, function (child, index) {
    return React__default.createElement("div", {
      key: "card-" + (index + 1),
      className: styles.cSlide + " " + (labelIndex === 1 && index + 1 === arrayChildren.length || labelIndex > 1 && labelIndex - 2 === index ? styles.cSlidePrev : labelIndex === 1 && index + 2 === arrayChildren.length || labelIndex === 2 && index + 1 === arrayChildren.length || labelIndex > 1 && labelIndex - 3 === index ? styles.cSlidePrev2 : labelIndex === arrayChildren.length - 1 && index === 0 || labelIndex + 2 === index + 1 || labelIndex === arrayChildren.length - 1 && index === 0 || labelIndex === arrayChildren.length && index === 1 ? styles.cSlideNext2 : labelIndex === index + 1 ? styles.cSlideActive : labelIndex + 1 === index + 1 || labelIndex === arrayChildren.length && index === 0 ? styles.cSlideNext : '')
    }, child);
  })));
};

var Carousel$1 = function Carousel$1(_ref) {
  var children = _ref.children;
  return createElement(Carousel, null, children);
};

export { Carousel$1 as Carousel };
//# sourceMappingURL=index.modern.js.map
